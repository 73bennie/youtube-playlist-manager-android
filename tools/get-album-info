#!/usr/bin/env bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

LIBDIR="~/bin/lib"
source "${LIBDIR}/set_colors.sh"

DB="${HOME}/.pldl/albums.db"
mkdir -p "$(dirname "$DB")"

if [[ $# -lt 1 ]]; then
    echo -e "${RED}Usage:${NC} $0 <YouTubeMusic Playlist URL>"
    exit 1
fi

URL="$1"

echo -e "${BLUE}▶ Fetching playlist (flat) metadata from:${NC} $URL"

# Step 1: Flat playlist to get playlist_id and first video ID
if ! FLAT_JSON=$(yt-dlp --flat-playlist --dump-single-json "$URL" 2>/dev/null); then
    echo -e "${RED}✖ Failed to fetch flat playlist metadata${NC}"
    exit 1
fi

playlist_id=$(jq -r '.id // "unknown_playlist"' <<< "$FLAT_JSON")
first_video_id=$(jq -r '.entries[0].id // empty' <<< "$FLAT_JSON")

if [[ -z "$first_video_id" ]]; then
    echo -e "${RED}✖ No entries found in playlist${NC}"
    exit 1
fi

video_url="https://music.youtube.com/watch?v=$first_video_id"
echo -e "${BLUE}▶ Fetching first track metadata from:${NC} $video_url"

# Step 2: Get full metadata for the first track
if ! VIDEO_JSON=$(yt-dlp --dump-json "$video_url" 2>/dev/null); then
    echo -e "${RED}✖ Failed to fetch track metadata${NC}"
    exit 1
fi

artist=$(jq -r '.artist // "Unknown Artist"' <<< "$VIDEO_JSON")
album=$(jq -r '.album // "Unknown Album"' <<< "$VIDEO_JSON")

#echo -e "${BLUE}▶ Ensuring database and table exist at:${NC} $DB"
#sqlite3 "$DB" <<EOF
#CREATE TABLE IF NOT EXISTS playlists (
#    playlist_id TEXT PRIMARY KEY,
#    artist TEXT,
#    album TEXT
#);
#EOF

echo -e "${YELLOW}★ Playlist ID:${NC} ${BOLD}$playlist_id${NC}"
echo -e "${YELLOW}★ Artist:${NC} ${BOLD}$artist${NC}"
echo -e "${YELLOW}★ Album:${NC} ${BOLD}$album${NC}"

#echo -e "${BLUE}▶ Saving to database...${NC}"
#sqlite3 "$DB" <<EOF
#INSERT OR REPLACE INTO playlists (playlist_id, artist, album)
#VALUES ('$playlist_id', '$artist', '$album');
#EOF

echo -e "${GREEN}
echo -e "${GREEN}✔ Done! Metadata stored in ${BOLD}albums.db${NC}"

