#!/usr/bin/env bash

cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

source "lib/config.sh"
source "lib/functions.sh"

# Check Android storage permissions
check_android_storage

createEnv

while true; do
  clear
  # Check for artist/album inconsistencies
  found=$(sqlite3 "$DB_FULL_PATH" "
      SELECT 1
      FROM tracks
      WHERE artist IS NOT NULL AND album IS NOT NULL
      GROUP BY playlist_id
      HAVING COUNT(DISTINCT artist) > 1 OR COUNT(DISTINCT album) > 1
      LIMIT 1;
  ")

  # Check if plist.txt has any non-empty, non-comment lines
  playlist_count=$(grep -v '^[[:space:]]*$' "$PLAYLIST_FILE" 2>/dev/null | grep -v '^[[:space:]]*#' | wc -l)

  # Highlight option 1 in green if playlists are available
  if [[ "$playlist_count" -gt 0 ]]; then
    fetch_line="${GREEN}1) Fetch and update playlist metadata (${playlist_count} playlist(s) ready)${RESET}"
  else
    fetch_line="${GREEN}1)${RESET} Fetch and update playlist metadata"
  fi

  # Check for playlists available for download
  downloadable_playlists=$(sqlite3 -separator '|' "$DB" "
    SELECT COUNT(*)
    FROM (
      SELECT playlist_id
      FROM tracks
      WHERE artist IS NOT NULL AND TRIM(artist) != ''
        AND album IS NOT NULL AND TRIM(album) != ''
      GROUP BY playlist_id
      HAVING SUM(CASE WHEN downloaded = 0 THEN 1 ELSE 0 END) > 0
         AND COUNT(DISTINCT artist || '|' || album) = 1
    );
  " 2>/dev/null || echo "0")

  # Highlight normalization line in red if inconsistencies found
  if [[ "$found" == "1" ]]; then
    normalize_line="${RED}2) Normalize playlist artist/album metadata (inconsistencies found)${RESET}"
  else
    normalize_line="${GREEN}2)${RESET} Normalize playlist artist/album metadata"
  fi

  # Highlight option 3 in green if tracks are available for download
  if [[ "$downloadable_playlists" -gt 0 ]]; then
    download_line="${GREEN}3) Download tracks with metadata tagging (${downloadable_playlists} playlist(s) ready)${RESET}"
  else
    download_line="${GREEN}3)${RESET} Download tracks with metadata tagging"
  fi

  # Highlight option 4 in green if playlists are available for fetch and download
  if [[ "$playlist_count" -gt 0 ]]; then
    fetch_download_line="${GREEN}4) Fetch and Download (${playlist_count} playlist(s) ready)${RESET}"
  else
    fetch_download_line="${GREEN}4)${RESET} Fetch and Download"
  fi

  echo -e "${CYAN}=== YouTube Music Playlist Manager ===${RESET}"
  echo -e "$fetch_line"
  echo -e "$normalize_line"
  echo -e "$download_line"
  echo -e "$fetch_download_line"
  echo -e "${GREEN}5)${RESET} Database Functions"
  echo -e "${GREEN}0)${RESET} Exit"
  echo
  read -p "Choose an option: " option

  case "$option" in
    1)
      clear
      echo -e "${CYAN}=== Fetch and Update Playlist Metadata ===${RESET}"
      echo
      
      if [[ "$playlist_count" -eq 0 ]]; then
        echo -e "${RED}No available playlists${RESET}"
        echo "Please add playlist URLs or IDs to $PLAYLIST_FILE"
      else
        ./get-metadata.sh -f "$PLAYLIST_FILE"
      fi
      
      echo
      read -rp "Press Enter to continue..."
      ;;

    2)
      ./normalize.sh
      ;;

    3)
      clear
      echo -e "${CYAN}=== Download Tracks ===${RESET}"
      echo
      ./download.sh
      echo
      echo "Process Complete"
        sleep 1
      ;;

    4)
      clear
      echo -e "${CYAN}=== Fetch and Download ===${RESET}"
      echo
      
      if [[ "$playlist_count" -eq 0 ]]; then
        echo -e "${RED}No available playlists${RESET}"
        echo "Please add playlist URLs or IDs to $PLAYLIST_FILE"
      else
        echo -e "${YELLOW}Step 1: Fetching metadata...${RESET}"
        ./get-metadata.sh -f "$PLAYLIST_FILE"
        
        echo
        echo -e "${YELLOW}Step 2: Downloading tracks...${RESET}"
        ./download.sh
      fi
      
      echo
      echo "Process Complete"
      sleep 2
      ;;

    5)
      clear
      echo -e "${BLUE}Database Functions${RESET}"
      echo
      ./database-functions.sh
      ;;

    0)
      echo -e "${YELLOW}Exiting...${RESET}"
      break
      ;;

    *)
      echo -e "${RED}Invalid option. Please choose between 0 and 5.${RESET}"
      sleep 1
      ;;
  esac
done
